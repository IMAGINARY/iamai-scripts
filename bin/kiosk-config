#!/bin/bash

# Script partially based on https://github.com/RPi-Distro/raspi-config

DIALOG=whiptail
ASK_TO_REBOOT=0

calc_wt_size() {
  # NOTE: it's tempting to redirect stderr to /dev/null, so supress error 
  # output from tput. However in this case, tput detects neither stdout or 
  # stderr is a tty and so only gives default 80, 24 values
  D_HEIGHT=18
  D_WIDTH=$(tput cols)

  if [ -z "$D_WIDTH" ] || [ "$D_WIDTH" -lt 60 ]; then
    D_WIDTH=80
  fi
  if [ "$D_WIDTH" -gt 178 ]; then
    D_WIDTH=120
  fi
  D_MENU_HEIGHT=$(($D_HEIGHT-7))
}

error_unrecognized_option() {
    "$DIALOG" --msgbox "Programmer error: unrecognized option $1" 0 0
    exit 1
}

error_processing_option() {
    "$DIALOG" --msgbox "There was an error running option $1" 0 0
    exit 1
}

do_finish() {
  if [ $ASK_TO_REBOOT -eq 1 ]; then
    "$DIALOG" --yesno "Would you like to reboot now?" 20 60 2
    if [ $? -eq 0 ]; then # yes
      sync
      reboot
    fi
  fi
  exit 0
}

do_unimplemented() {
    "$DIALOG" --msgbox "Not implemented yet"  0 0 1
}

do_exhibit_menu() {
    do_unimplemented
}

do_hardening_menu() {
    do_unimplemented
}

do_graphics_and_input_menu() {
    do_unimplemented
}

do_localization_menu() {
    do_unimplemented
}

do_system_information_menu() {
    local FUN RET
    FUN=$("$DIALOG" --title "System Information" \
        --menu "" 0 $D_WIDTH 0 \
        --cancel-button Back \
        --ok-button Select \
        "1 Brief" "Show a brief summary" \
        "2 Detailed" "Show detailed system and hardware information" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            1\ *)
                "$DIALOG" --textbox /dev/stdin --scrolltext 0 $D_WIDTH <<<"$(inxi -F -w)"
                ;;
            2\ *)
                "$DIALOG" --textbox /dev/stdin --scrolltext 0 $D_WIDTH <<<"$(inxi -F -d -f -i -l -m -o -p -r -t -u -x -w)"
                ;;
            *) error_unrecognized_option "$FUN" ;;
        esac || error_processing_option "$FUN"
    fi
}

do_main_menu() {
    local FUN RET
    FUN=$("$DIALOG" --title "Kiosk Configuration Tool (kiosk-config)" \
        --menu "Configure various settings of this kiosk station." 0 0 0 \
        --cancel-button Finish \
        --ok-button Select \
        "1 Exhibit" "Configure which exhibit to start automatically" \
        "2 Hardening" "Harden the station" \
        "3 Graphics & Input" "Configure graphics and input devices" \
        "4 Localization Options" "Set up language and regional settings to match your location" \
        "5 System Information" "Display operating system and hardware information" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        do_finish
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            1\ *) do_exhibit_menu ;;
            2\ *) do_hardening_menu ;;
            3\ *) do_graphics_and_input_menu ;;
            4\ *) do_localization_menu ;;
            5\ *) do_system_information_menu ;;
            *) error_unrecognized_option "$FUN" ;;
        esac || error_processing_option "$FUN"
    fi
}


# Everything else needs to be run as root
if [ $(id -u) -ne 0 ]; then
  printf "Script must be run as root. Try 'sudo $0'\n"
  exit 1
fi

calc_wt_size
while true; do
    do_main_menu
done
